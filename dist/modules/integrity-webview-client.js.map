{"version":3,"file":"integrity-webview-client.js","sources":["../../index.ts","../../public_api.ts","../../src/integrity-webview-client.ts","../../src/services/receive-message.service.ts","../../src/services/webview-client.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {WebviewClientService,ReceiveMessageService} from './public_api';\n","/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n\n/**\n * Entry point for all public APIs of the package.\n */\nexport {WebviewClientService,ReceiveMessageService} from './src/integrity-webview-client';\n","// Public classes.\n//export { WebviewClientObject } from './services/webview-client-object';\nexport { WebviewClientService } from './services/webview-client.service';\nexport { ReceiveMessageService } from './services/receive-message.service';\n","// tslint:disable:max-line-length\n\nimport { Injectable } from '@angular/core';\nexport class ReceiveMessageService {\nprivate InitKey: string = 'com.brickchain.integrity.init';\nprivate PollKey: string = 'com.brickchain.integrity.poll';\nprivate HandleKey: string = 'com.brickchain.integrity.handle';\nprivate HandleResultKey: string = 'com.brickchain.integrity.handle.result';\nprivate HandleErrorKey: string = 'com.brickchain.integrity.handle.error';\n/**\n * @param {?} event\n * @return {?}\n */\npublic receiveMessage(event: any): void {\n    if (event.data.op) {\n      const /** @type {?} */ script = event.data;\n      switch (script.op) {\n        case 'init':\n          script.result = ( /** @type {?} */((window as any)))[this.InitKey] ? ( /** @type {?} */((window as any)))[this.InitKey](script.param) : null;\n          break;\n        case 'poll':\n          script.result = ( /** @type {?} */((window as any)))[this.PollKey] ? ( /** @type {?} */((window as any)))[this.PollKey]() : null;\n          break;\n        case 'handle':\n          script.result = ( /** @type {?} */((window as any)))[this.HandleKey] ? ( /** @type {?} */((window as any)))[this.HandleKey]() : null;\n          break;\n        case 'result':\n          if (event.data.param) {\n            script.result = ( /** @type {?} */((window as any)))[this.HandleResultKey] ? ( /** @type {?} */((window as any)))[this.HandleResultKey](script.param) : null;\n          } else {\n            script.result = ( /** @type {?} */((window as any)))[this.HandleResultKey] ? ( /** @type {?} */((window as any)))[this.HandleResultKey]() : null;\n          }\n          break;\n        case 'error':\n          script.result = ( /** @type {?} */((window as any)))[this.HandleErrorKey] ? ( /** @type {?} */((window as any)))[this.HandleErrorKey](script.param) : null;\n          break;\n        case 'title':\n          script.result = document.title;\n          break;\n        default:\n          script.error = 'unsupported operation';\n      }\n      event.source.postMessage(script, event.origin);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ReceiveMessageService_tsickle_Closure_declarations() {\n/** @type {?} */\nReceiveMessageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReceiveMessageService.ctorParameters;\n/** @type {?} */\nReceiveMessageService.prototype.InitKey;\n/** @type {?} */\nReceiveMessageService.prototype.PollKey;\n/** @type {?} */\nReceiveMessageService.prototype.HandleKey;\n/** @type {?} */\nReceiveMessageService.prototype.HandleResultKey;\n/** @type {?} */\nReceiveMessageService.prototype.HandleErrorKey;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nexport class WebviewClientService {\nprivate params: any;\nprivate InitKey: string = 'com.brickchain.integrity.init';\nprivate PollKey: string = 'com.brickchain.integrity.poll';\nprivate HandleKey: string = 'com.brickchain.integrity.handle';\nprivate HandleResultKey: string = 'com.brickchain.integrity.handle.result';\nprivate HandleErrorKey: string = 'com.brickchain.integrity.handle.error';\nprivate CancelKey: string = 'com.brickchain.integrity.cancel';\nprivate result: any;\nprivate handleDirective: any;\npublic constructor() {\n    (window as any)[this.PollKey] = () => this.result;\n    (window as any)[this.HandleKey] = () => this.handleDirective;\n  }\n/**\n * @return {?}\n */\npublic init(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      ( /** @type {?} */((window as any)))[this.InitKey] = (data: string) => {\n        try {\n          resolve(JSON.parse(data));\n        } catch ( /** @type {?} */error) {\n          reject(error);\n        }\n        return true;\n      };\n    });\n  }\n/**\n * @param {?} result\n * @return {?}\n */\npublic close(result: any): void {\n    this.result = result;\n  }\n/**\n * @return {?}\n */\npublic cancel(): void {\n    this.result = this.CancelKey;\n  }\n/**\n * @param {?} directive\n * @return {?}\n */\npublic handle(directive: any): Promise<any> {\n    this.handleDirective = directive;\n    return new Promise((resolve, reject) => {\n      ( /** @type {?} */((window as any)))[this.HandleResultKey] = (json: any) => resolve(json ? JSON.parse(json) : json);\n      ( /** @type {?} */((window as any)))[this.HandleErrorKey] = (json: any) => reject(json ? JSON.parse(json) : json);\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WebviewClientService_tsickle_Closure_declarations() {\n/** @type {?} */\nWebviewClientService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebviewClientService.ctorParameters;\n/** @type {?} */\nWebviewClientService.prototype.params;\n/** @type {?} */\nWebviewClientService.prototype.InitKey;\n/** @type {?} */\nWebviewClientService.prototype.PollKey;\n/** @type {?} */\nWebviewClientService.prototype.HandleKey;\n/** @type {?} */\nWebviewClientService.prototype.HandleResultKey;\n/** @type {?} */\nWebviewClientService.prototype.HandleErrorKey;\n/** @type {?} */\nWebviewClientService.prototype.CancelKey;\n/** @type {?} */\nWebviewClientService.prototype.result;\n/** @type {?} */\nWebviewClientService.prototype.handleDirective;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}