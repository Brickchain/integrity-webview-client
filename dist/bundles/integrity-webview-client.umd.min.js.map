{"version":3,"file":"integrity-webview-client.umd.min.js","sources":["../../src/services/webview-client.service.ts","../../src/services/receive-message.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nexport class WebviewClientService {\nprivate params: any;\nprivate InitKey: string = 'com.brickchain.integrity.init';\nprivate PollKey: string = 'com.brickchain.integrity.poll';\nprivate HandleKey: string = 'com.brickchain.integrity.handle';\nprivate HandleResultKey: string = 'com.brickchain.integrity.handle.result';\nprivate HandleErrorKey: string = 'com.brickchain.integrity.handle.error';\nprivate CancelKey: string = 'com.brickchain.integrity.cancel';\nprivate result: any;\nprivate handleDirective: any;\npublic constructor() {\n    (window as any)[this.PollKey] = () => this.result;\n    (window as any)[this.HandleKey] = () => this.handleDirective;\n  }\n/**\n * @return {?}\n */\npublic init(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      ( /** @type {?} */((window as any)))[this.InitKey] = (data: string) => {\n        try {\n          resolve(JSON.parse(data));\n        } catch ( /** @type {?} */error) {\n          reject(error);\n        }\n        return true;\n      };\n    });\n  }\n/**\n * @param {?} result\n * @return {?}\n */\npublic close(result: any): void {\n    this.result = result;\n  }\n/**\n * @return {?}\n */\npublic cancel(): void {\n    this.result = this.CancelKey;\n  }\n/**\n * @param {?} directive\n * @return {?}\n */\npublic handle(directive: any): Promise<any> {\n    this.handleDirective = directive;\n    return new Promise((resolve, reject) => {\n      ( /** @type {?} */((window as any)))[this.HandleResultKey] = (json: any) => resolve(json ? JSON.parse(json) : json);\n      ( /** @type {?} */((window as any)))[this.HandleErrorKey] = (json: any) => reject(json ? JSON.parse(json) : json);\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WebviewClientService_tsickle_Closure_declarations() {\n/** @type {?} */\nWebviewClientService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebviewClientService.ctorParameters;\n/** @type {?} */\nWebviewClientService.prototype.params;\n/** @type {?} */\nWebviewClientService.prototype.InitKey;\n/** @type {?} */\nWebviewClientService.prototype.PollKey;\n/** @type {?} */\nWebviewClientService.prototype.HandleKey;\n/** @type {?} */\nWebviewClientService.prototype.HandleResultKey;\n/** @type {?} */\nWebviewClientService.prototype.HandleErrorKey;\n/** @type {?} */\nWebviewClientService.prototype.CancelKey;\n/** @type {?} */\nWebviewClientService.prototype.result;\n/** @type {?} */\nWebviewClientService.prototype.handleDirective;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// tslint:disable:max-line-length\n\nimport { Injectable } from '@angular/core';\nexport class ReceiveMessageService {\nprivate InitKey: string = 'com.brickchain.integrity.init';\nprivate PollKey: string = 'com.brickchain.integrity.poll';\nprivate HandleKey: string = 'com.brickchain.integrity.handle';\nprivate HandleResultKey: string = 'com.brickchain.integrity.handle.result';\nprivate HandleErrorKey: string = 'com.brickchain.integrity.handle.error';\n/**\n * @param {?} event\n * @return {?}\n */\npublic receiveMessage(event: any): void {\n    if (event.data.op) {\n      const /** @type {?} */ script = event.data;\n      switch (script.op) {\n        case 'init':\n          script.result = ( /** @type {?} */((window as any)))[this.InitKey] ? ( /** @type {?} */((window as any)))[this.InitKey](script.param) : null;\n          break;\n        case 'poll':\n          script.result = ( /** @type {?} */((window as any)))[this.PollKey] ? ( /** @type {?} */((window as any)))[this.PollKey]() : null;\n          break;\n        case 'handle':\n          script.result = ( /** @type {?} */((window as any)))[this.HandleKey] ? ( /** @type {?} */((window as any)))[this.HandleKey]() : null;\n          break;\n        case 'result':\n          if (event.data.param) {\n            script.result = ( /** @type {?} */((window as any)))[this.HandleResultKey] ? ( /** @type {?} */((window as any)))[this.HandleResultKey](script.param) : null;\n          } else {\n            script.result = ( /** @type {?} */((window as any)))[this.HandleResultKey] ? ( /** @type {?} */((window as any)))[this.HandleResultKey]() : null;\n          }\n          break;\n        case 'error':\n          script.result = ( /** @type {?} */((window as any)))[this.HandleErrorKey] ? ( /** @type {?} */((window as any)))[this.HandleErrorKey](script.param) : null;\n          break;\n        case 'title':\n          script.result = document.title;\n          break;\n        default:\n          script.error = 'unsupported operation';\n      }\n      event.source.postMessage(script, event.origin);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ReceiveMessageService_tsickle_Closure_declarations() {\n/** @type {?} */\nReceiveMessageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReceiveMessageService.ctorParameters;\n/** @type {?} */\nReceiveMessageService.prototype.InitKey;\n/** @type {?} */\nReceiveMessageService.prototype.PollKey;\n/** @type {?} */\nReceiveMessageService.prototype.HandleKey;\n/** @type {?} */\nReceiveMessageService.prototype.HandleResultKey;\n/** @type {?} */\nReceiveMessageService.prototype.HandleErrorKey;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["WebviewClientService","_this","this","InitKey","PollKey","HandleKey","HandleResultKey","HandleErrorKey","CancelKey","window","result","handleDirective","prototype","init","Promise","resolve","reject","data","JSON","parse","error","close","cancel","handle","directive","json","decorators","type","Injectable","ctorParameters","ReceiveMessageService","receiveMessage","event","op","script","param","document","title","source","postMessage","origin"],"mappings":"qXACA,IAAAA,sBAAA,WAUA,QAAAA,wBAAA,GAAAC,OAAAC,IALUA,MAAVC,QAA4B,gCAClBD,KAAVE,QAA4B,gCAClBF,KAAVG,UAA8B,kCACpBH,KAAVI,gBAAoC,yCAC1BJ,KAAVK,eAAmC,wCACzBL,KAAVM,UAA8B,kCACzBC,OAAeP,KAAKE,SAAW,WAAM,MAAAH,OAAKS,QAC1CD,OAAeP,KAAKG,WAAa,WAAM,MAAAJ,OAAKU,uBAO9CX,sBAAHY,UAAAC,KAAG,WAAA,GAAHZ,OAAAC,IADI,OAEO,IAAIY,SAAQ,SAACC,QAASC,QAD3B,OAEgBf,MAAKE,SAAW,SAAAc,MAD9B,IACEF,QAEQG,KAAKC,MAAMF,OACnB,MAAAG,OADAJ,OAEOI,OAAT,OAEO,MAKZpB,qBAAHY,UAAAS,MAAG,SAAAX,QAECR,KADKQ,OAASA,QAGfV,qBAAHY,UAAAU,OAAG,WAICpB,KAHKQ,OAASR,KAAKM,WAGpBR,qBAAHY,UAAAW,OAAG,SAAAC,WAAA,GAAHvB,OAAAC,IAQI,OADAA,MANKS,gBAAkBa,UAChB,GAAIV,SAAQ,SAACC,QAASC,QAO3B,OANgBf,MAAKK,iBAAmB,SAAAmB,MAAe,MAAAV,SAAQU,KAAOP,KAAKC,MAAMM,MAAQA,OAOzF,OANgBxB,MAAKM,gBAAkB,SAAAkB,MAAe,MAAAT,QAAOS,KAAOP,KAAKC,MAAMM,MAAQA,iCAItFzB,sBAAP0B,aACEC,KAAMC,cAMRA,aAHC5B,qBAAD6B,eAAC,WAAA,SCnDD,IAAAC,uBAAA,WACA,QAAAA,yBAGU5B,KAAVC,QAA4B,gCAClBD,KAAVE,QAA4B,gCAClBF,KAAVG,UAA8B,kCACpBH,KAAVI,gBAAoC,yCAC1BJ,KAAVK,eAAmC,8CAEhCuB,uBAAHlB,UAAAmB,eAAG,SAAAC,OAEC,GAAIA,MADMf,KAAKgB,GAAI,CAEjB,GADMC,QAASF,MAAMf,IAErB,QAAQiB,OADOD,IAEb,IADK,OAEHC,OADOxB,OAAS,OAAgBR,KAAKC,SAAW,OAAgBD,KAAKC,SAAS+B,OAAOC,OAAS,IAE9F,MACF,KADK,OAEHD,OADOxB,OAAS,OAAgBR,KAAKE,SAAW,OAAgBF,KAAKE,WAAa,IAElF,MACF,KADK,SAEH8B,OADOxB,OAAS,OAAgBR,KAAKG,WAAa,OAAgBH,KAAKG,aAAe,IAEtF,MACF,KADK,SAEC2B,MADMf,KAAKkB,MAEbD,OADOxB,OAAS,OAAgBR,KAAKI,iBAAmB,OAAgBJ,KAAKI,iBAAiB4B,OAAOC,OAAS,KAG9GD,OADOxB,OAAS,OAAgBR,KAAKI,iBAAmB,OAAgBJ,KAAKI,mBAAqB,IAGpG,MACF,KADK,QAEH4B,OADOxB,OAAS,OAAgBR,KAAKK,gBAAkB,OAAgBL,KAAKK,gBAAgB2B,OAAOC,OAAS,IAE5G,MACF,KADK,QAEHD,OADOxB,OAAS0B,SAASC,KAEzB,MACF,SACEH,OADOd,MAAQ,wBAGnBY,MADMM,OAAOC,YAAYL,OAAQF,MAAMQ,kCAItCV,uBAAPJ,aACEC,KAAMC,cACRA,aAECE,sBAADD,eAAC,WAAA"}