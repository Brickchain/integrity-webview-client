{"version":3,"file":"integrity-webview-client.umd.min.js","sources":["../../src/services/webview-client.service.ts","../../src/services/receive-message.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nexport class WebviewClientService {\nprivate InitKey: string = 'com.brickchain.integrity.init';\nprivate PollKey: string = 'com.brickchain.integrity.poll';\nprivate HandleKey: string = 'com.brickchain.integrity.handle';\nprivate HandleResultKey: string = 'com.brickchain.integrity.handle.result';\nprivate HandleErrorKey: string = 'com.brickchain.integrity.handle.error';\nprivate CancelKey: string = 'com.brickchain.integrity.cancel';\nprivate result: any;\nprivate handleDirective: any;\n/**\n * @param {?} action\n */\npublic constructor(action: (params: string) => void) {\n        \n        (<any>window)[this.InitKey] = (params: string) => {\n            action(params);\n        };\n\n        (<any>window)[this.PollKey] = () => this.result;\n        (<any>window)[this.HandleKey] = () => this.handleDirective;\n        \n    }\n/**\n * @param {?} result\n * @return {?}\n */\npublic close(result:any): void {\n        this.result = result;\n    }\n/**\n * @return {?}\n */\npublic cancel(): void {\n        this.result = this.CancelKey;\n    }\n/**\n * @param {?} directive\n * @return {?}\n */\npublic handle(directive:any) :Promise<any> {\n        this.handleDirective=directive;\n        return new Promise((resolve,reject) => {\n            ( /** @type {?} */((<any>window)))[this.HandleResultKey] = (json:any) => resolve(json ? JSON.parse(json) : json);\n            ( /** @type {?} */((<any>window)))[this.HandleErrorKey] = (json:any) => reject(json ? JSON.parse(json):json);\n        });\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\nnull,\n];\n}\n\nfunction WebviewClientService_tsickle_Closure_declarations() {\n/** @type {?} */\nWebviewClientService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebviewClientService.ctorParameters;\n/** @type {?} */\nWebviewClientService.prototype.InitKey;\n/** @type {?} */\nWebviewClientService.prototype.PollKey;\n/** @type {?} */\nWebviewClientService.prototype.HandleKey;\n/** @type {?} */\nWebviewClientService.prototype.HandleResultKey;\n/** @type {?} */\nWebviewClientService.prototype.HandleErrorKey;\n/** @type {?} */\nWebviewClientService.prototype.CancelKey;\n/** @type {?} */\nWebviewClientService.prototype.result;\n/** @type {?} */\nWebviewClientService.prototype.handleDirective;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nexport class ReceiveMessageService {\nprivate InitKey: string = 'com.brickchain.integrity.init';\nprivate PollKey: string = 'com.brickchain.integrity.poll';\nprivate HandleKey: string = 'com.brickchain.integrity.handle';\nprivate HandleResultKey: string = 'com.brickchain.integrity.handle.result';\nprivate HandleErrorKey: string = 'com.brickchain.integrity.handle.error';\n/**\n * @param {?} event\n * @return {?}\n */\npublic receiveMessage(event: any): void {\n    if (/*isDefined(event.data.op)*/event.data.op) {\n      let /** @type {?} */ script = event.data;\n      switch (script.op) {\n        case 'init':\n          script.result = ( /** @type {?} */((<any>window)))[this.InitKey] ? ( /** @type {?} */((<any>window)))[this.InitKey](script.param) : null;\n          break;\n        case 'poll':\n          script.result = ( /** @type {?} */((<any>window)))[this.PollKey] ? ( /** @type {?} */((<any>window)))[this.PollKey]() : null;\n          break;\n        case 'handle':\n          script.result = ( /** @type {?} */((<any>window)))[this.HandleKey] ? ( /** @type {?} */((<any>window)))[this.HandleKey]() : null;\n          break;\n        case 'result':\n          if (/*isDefined(event.data.param)*/event.data.param) {\n            script.result = ( /** @type {?} */((<any>window)))[this.HandleResultKey] ? ( /** @type {?} */((<any>window)))[this.HandleResultKey](script.param) : null;\n          } else {\n            script.result = ( /** @type {?} */((<any>window)))[this.HandleResultKey] ? ( /** @type {?} */((<any>window)))[this.HandleResultKey]() : null;\n          }\n          break;\n        case 'error':\n          script.result = ( /** @type {?} */((<any>window)))[this.HandleErrorKey] ? ( /** @type {?} */((<any>window)))[this.HandleErrorKey](script.param) : null;\n          break;\n        case 'title':\n          script.result = document.title;\n          break;\n        default:\n          script.error = 'unsupported operation'\n      }\n      event.source.postMessage(script, event.origin);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ReceiveMessageService_tsickle_Closure_declarations() {\n/** @type {?} */\nReceiveMessageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReceiveMessageService.ctorParameters;\n/** @type {?} */\nReceiveMessageService.prototype.InitKey;\n/** @type {?} */\nReceiveMessageService.prototype.PollKey;\n/** @type {?} */\nReceiveMessageService.prototype.HandleKey;\n/** @type {?} */\nReceiveMessageService.prototype.HandleResultKey;\n/** @type {?} */\nReceiveMessageService.prototype.HandleErrorKey;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["WebviewClientService","action","_this","this","InitKey","PollKey","HandleKey","HandleResultKey","HandleErrorKey","CancelKey","window","params","result","handleDirective","prototype","close","cancel","handle","directive","Promise","resolve","reject","json","JSON","parse","decorators","type","Injectable","ctorParameters","ReceiveMessageService","receiveMessage","event","data","op","script","param","document","title","error","source","postMessage","origin"],"mappings":"qXACA,IAAAA,sBAAA,WAYA,QAAAA,sBAIKC,QAJL,GAAAC,OAAAC,IARYA,MAAZC,QAA8B,gCAClBD,KAAZE,QAA8B,gCAElBF,KAAZG,UAAgC,kCACpBH,KAAZI,gBAAsC,yCAC1BJ,KAAZK,eAAqC,wCAEzBL,KAAZM,UAAgC,kCAGlBC,OAAQP,KAAKC,SAAW,SAACO,QAC3BV,OAAOU,SAGLD,OAAQP,KAAKE,SAAW,WAAM,MAAAH,OAAKU,QACnCF,OAAQP,KAAKG,WAAa,WAAM,MAAAJ,OAAKW,uBAQ9Cb,sBAALc,UAAAC,MAAK,SAAAH,QAAGT,KACKS,OAASA,QAGjBZ,qBAALc,UAAAE,OAAK,WAEGb,KADKS,OAAST,KAAKM,WAGtBT,qBAALc,UAAAG,OAAK,SAAAC,WAAA,GAALhB,OAAAC,IAMQ,OADAA,MAJKU,gBAAgBK,UACd,GAAIC,SAAQ,SAACC,QAAQC,QAKxB,OAJcnB,MAAKK,iBAAmB,SAAAe,MAAc,MAAAF,SAAQE,KAAOC,KAAKC,MAAMF,MAAQA,OAKtF,OAJcpB,MAAKM,gBAAkB,SAAAc,MAAc,MAAAD,QAAOC,KAAOC,KAAKC,MAAMF,MAAMA,iCAIvFtB,sBAAPyB,aACEC,KAAMC,cAIRA,aADC3B,qBAAD4B,eAAC,WAAA,OAOD,MCtDA,IAAAC,uBAAA,WAAA,QAAAA,yBAIU1B,KAAVC,QAA4B,gCAClBD,KAAVE,QAA4B,gCAClBF,KAAVG,UAA8B,kCACpBH,KAAVI,gBAAoC,yCAC1BJ,KAAVK,eAAmC,8CAEhCqB,uBAAHf,UAAAgB,eAAG,SAAAC,OACC,GAAKA,MAAiCC,KAAKC,GAAI,CAC7C,GAAIC,QAASH,MAAMC,IACnB,QAAQE,OAAOD,IACb,IAAK,OACHC,OAAOtB,OAAS,OAAcT,KAAKC,SAAW,OAAcD,KAAKC,SAAS8B,OAAOC,OAAS,IAC1F,MACF,KAAK,OACHD,OAAOtB,OAAS,OAAcT,KAAKE,SAAW,OAAcF,KAAKE,WAAa,IAC9E,MACF,KAAK,SACH6B,OAAOtB,OAAS,OAAcT,KAAKG,WAAa,OAAcH,KAAKG,aAAe,IAClF,MACF,KAAK,SACEyB,MAAoCC,KAAKG,MAC5CD,OAAOtB,OAAS,OAAcT,KAAKI,iBAAmB,OAAcJ,KAAKI,iBAAiB2B,OAAOC,OAAS,KAE1GD,OAAOtB,OAAS,OAAcT,KAAKI,iBAAmB,OAAcJ,KAAKI,mBAAqB,IAEhG,MACF,KAAK,QACH2B,OAAOtB,OAAS,OAAcT,KAAKK,gBAAkB,OAAcL,KAAKK,gBAAgB0B,OAAOC,OAAS,IACxG,MACF,KAAK,QACHD,OAAOtB,OAASwB,SAASC,KACzB,MACF,SACEH,OAAOI,MAAQ,wBAEnBP,MAAMQ,OAAOC,YAAYN,OAAQH,MAAMU,kCAItCZ,uBAAPJ,aACEC,KAAMC,cAARA,aAGCE,sBAADD,eAAC,WAAA"}